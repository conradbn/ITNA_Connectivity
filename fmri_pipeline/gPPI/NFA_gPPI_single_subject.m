function [] = NFA_gPPI_single_subject(subj,dir_nii,dir_results,dir_fs)
%% Generalized PPI analysis pipeline for NFA_Structure_Function project
% The final outputs ("stats.PPI...") provide information on the task-evoked
% connectivity of the Digit and Letter ROIs during each condition,
% including the first-level contrasts between conditions

%% Make PPI directory 
dir_PPI = [dir_nii subj '.PPI'];
mkdir(dir_PPI);
% Remove any existing files if it exists
unix(['rm -rf ' dir_PPI '/*']);
diary([dir_PPI '/PPI.command_window_output']); diary on;

%% Re-run 3dREMLfit GLM with NO censoring
% This model includes the task and nuisance effects
% Will ultimately use errts (residuals) to extract PPI seed timeseries
% This is based on the previously run 3dDenconvolve/REML commands that
% occured with afni_proc pipeline
cd(dir_results);
hemi = {'lh' 'rh'};
for ii = 1:numel(hemi)
    h = hemi{ii};
    unix(['3dREMLfit -matrix X.nocensor.xmat.1D -input '...
          ' "pb06.' subj '.' h '.r0*.scale.niml.dset" '...
          ' -fout -tout -verb -GOFORIT '...
          ' -Rbuck ' dir_PPI '/stats.nocensor.' subj '.' h '_REML'...
          ' -Rvar ' dir_PPI '/stats.nocensor.' subj '.' h '_REMLvar'...
          ' -Rfitts ' dir_PPI '/fitts.nocensor.' subj '.' h '_REML'...
          ' -Rerrts ' dir_PPI '/errts.nocensor.' subj '.' h '_REML'...
          ' -Rwherr ' dir_PPI '/errts.nocensor.' subj '.' h '_REMLwh']);
end

%% Create binary timeseries (per condition) and save as text files (per run)
cd(dir_PPI)
% Set condition names                          
task_conds = {'Cp_Digits' 'Ca_Digits' 'Cp_Letters' 'Ca_Letters'};
task_conds_new = {'Dp' 'Da' 'Lp' 'La'};
TR = 2;
num_TRs_run = 151;
run_length_sec = TR * num_TRs_run;

for kk = 1:numel(task_conds)
    % Generate the per run timeseries files
    unix(['timing_tool.py -tr 0.1 -stim_dur 0.5'...
          ' -timing ' dir_nii subj '.onsets/onsets_' task_conds{kk} '_' subj '.txt' ...
          ' -timing_to_1D ' dir_PPI '/stim.' task_conds_new{kk} '.upsamp'...
          ' -run_len ' num2str(run_length_sec) ' -per_run_file -show_timing']);
end

%% Create HRF model for deconvolution/reconvolution
unix(['waver -dt .1 -GAM -gamb 8.6 -gamc 0.547 -gamd 1 -inline 1@1 > ' dir_PPI '/GammaHR.1D']);

%% Extract PPI seed timeseries and save to text file
cd(dir_PPI)
task_conds = {'Dp' 'Da' 'Lp' 'La'};
seed = {'Dp-Da' 'Lp-La'};
num_runs = 8;

% Make sure there are all runs present
if exist('stim.Dp.upsamp_r08.1D','file') == 0
    error(['Error for subject ' subj ' - not enough runs']);
end

% For each hemisphere
for hh = 1:numel(hemi)
    h = hemi{hh};
    % Read in the errts dataset
    errts = [dir_PPI '/errts.nocensor.' subj '.' h '_REML.niml.dset'];
    e = afni_niml_readsimple(errts);
    
    % For each seed ROI
    for ss = 1:numel(seed)
        s = seed{ss};
        % Get the seed (ROI) mask node indices based on hemisphere/condition
        seed_mask = [dir_fs 'SUMA/std.60.' h '.PP19_' s '.MNI152.votc.inflated.14mm_diam.1.1D'];
        sm = readmatrix(seed_mask,'FileType','text','NumHeaderLines',2);
        % Get the errts timeseries from the seed nodes
        es = e.data(sm(:,1)+1,:); % Add one because AFNI index starts at 0
        % Write to text file
        writematrix(es',[s '.' h '.bold_all_nodes.1D'],'FileType','text');
        writematrix(mean(es)',[s '.' h '.bold.1D'],'FileType','text');
        
        % For each run
        for rr = 1:num_runs
            r = num2str(rr);
            % Get the index of TRs for this run
            rstart = rr * num_TRs_run - num_TRs_run;
            rend = rr * num_TRs_run - 1;
            TR_index = ['"{' num2str(rstart) '..' num2str(rend) '}"'];
            
            % For each of the task conditions
            for tt = 1:numel(task_conds)
                t = task_conds{tt};
                
                % Upsampling and deconvolution of BOLD data
                % Don't have to redo these steps for every condition
                if tt == 1  
                    % Upsample BOLD data
                    unix(['1dcat ' s '.' h '.bold.1D' TR_index ' |'...
                        ' 1dUpsample 20 stdin: > ' s '.' h '.bold.upsamp_r0' r '.1D']);
                    
                    % Deconvolve upsampled BOLD data into "neural" time space
                    unix(['3dTfitter -RHS ' s '.' h  '.bold.upsamp_r0' r '.1D'...
                        ' -FALTUNG GammaHR.1D temp.1D 012 -2 -l2lasso -6']);
                    unix(['1dtranspose temp.1D '  s '.' h '.neural.upsamp_r0' r '.1D']);
                    unix('rm -f temp.1D');
                end
                
                % Create interaction term for each condition/run (Physiological x
                % Psychological)
                unix(['1deval -a ' s '.' h '.neural.upsamp_r0' r '.1D'...
                    ' -b stim.' t '.upsamp_r0' r '.1D'...
                    ' -expr "a*b" > inter.' t '.seed_' s '.' h '.upsamp_r0' r '.1D']);
                
                % Convolve interaction terms with HRF, i.e. back to BOLD time space
                unix(['waver -FILE 0.1 GammaHR.1D'...
                    ' -input inter.' t '.seed_' s '.' h '.upsamp_r0' r '.1D'...
                    ' -numout ' num2str(run_length_sec/0.1) ' > '...
                    ' inter.' t '.seed_' s '.' h '.bold.upsamp_r0' r '.1D']);
                
                % Downsample the interaction files back to TR every 2 seconds
                upsamp = ['inter.' t '.seed_' s '.' h '.bold.upsamp_r0' r '.1D'];
                downsamp = strrep(upsamp,'upsamp','downsamp');
                temp_series = load(upsamp);
                temp_series_downsamp = temp_series(1:20:end);  % get every 20th timepoint, i.e. 2/0.1 = 20
                writematrix(temp_series_downsamp,downsamp,'FileType','text');
            end
        end
        % For each of the task conditions
        for tt = 1:numel(task_conds)
            t = task_conds{tt};
            % Catenate all runs for final PPI regressor
            unix(['cat inter.' t '.seed_' s '.' h '.bold.downsamp_r0*.1D >'...
                '      inter.' t '.seed_' s '.' h '.bold.downsamp_allruns.1D']);
        end     
    end
end

%% Re-run original GLM with PPI regressors and censoring
cd(dir_results);
% For each hemisphere
for hh = 1:numel(h)
    h = hemi{hh};
    % For each seed ROI
    for ss = 1:numel(seed)
        s = seed{ss};
        % 3dDeconvolve to set up matrix and contrasts (won't actually fit
        % this model but instead pass it to 3dREMLfit)
        unix(['3dDeconvolve -input pb06.' subj '.' h '.r*.scale.niml.dset         '...
            '-censor censor_' subj '_combined_2.1D                                '...
            '-ortvec mot_demean.r01.1D mot_demean_r01                             '...
            '-ortvec mot_demean.r02.1D mot_demean_r02                             '...
            '-ortvec mot_demean.r03.1D mot_demean_r03                             '...
            '-ortvec mot_demean.r04.1D mot_demean_r04                             '...
            '-ortvec mot_demean.r05.1D mot_demean_r05                             '...
            '-ortvec mot_demean.r06.1D mot_demean_r06                             '...
            '-ortvec mot_demean.r07.1D mot_demean_r07                             '...
            '-ortvec mot_demean.r08.1D mot_demean_r08                             '...
            '-ortvec mot_deriv.r01.1D mot_deriv_r01                               '...
            '-ortvec mot_deriv.r02.1D mot_deriv_r02                               '...
            '-ortvec mot_deriv.r03.1D mot_deriv_r03                               '...
            '-ortvec mot_deriv.r04.1D mot_deriv_r04                               '...
            '-ortvec mot_deriv.r05.1D mot_deriv_r05                               '...
            '-ortvec mot_deriv.r06.1D mot_deriv_r06                               '...
            '-ortvec mot_deriv.r07.1D mot_deriv_r07                               '...
            '-ortvec mot_deriv.r08.1D mot_deriv_r08                               '...
            '-polort 3 -float                                                     '...
            '-num_stimts 11                                                       '...
            '-stim_times 1 stimuli/onsets_Cp_Digits_' subj '.txt "GAM(8.6,.547,1)" '...
            '-stim_label 1 Dp                                                     '...
            '-stim_times 2 stimuli/onsets_Ca_Digits_' subj '.txt "GAM(8.6,.547,1)" '...
            '-stim_label 2 Da                                                     '...
            '-stim_times 3 stimuli/onsets_Cp_Letters_' subj '.txt "GAM(8.6,.547,1)" '...
            '-stim_label 3 Lp                                                     '...
            '-stim_times 4 stimuli/onsets_Ca_Letters_' subj '.txt "GAM(8.6,.547,1)" '...
            '-stim_label 4 La                                                     '...
            '-stim_times 5 stimuli/onsets_Ie_ALL_' subj '.txt "GAM(8.6,.547,1)"   '...
            '-stim_label 5 error                                                  '...
            '-stim_times 6 stimuli/onsets_Io_ALL_' subj '.txt "GAM(8.6,.547,1)"   '...
            '-stim_label 6 omiss                                                  '...
            '-stim_file 7 ' dir_PPI '/inter.Dp.seed_' s '.' h '.bold.downsamp_allruns.1D -stim_label 7 iDp '...
            '-stim_file 8 ' dir_PPI '/inter.Da.seed_' s '.' h '.bold.downsamp_allruns.1D -stim_label 8 iDa '...
            '-stim_file 9 ' dir_PPI '/inter.Lp.seed_' s '.' h '.bold.downsamp_allruns.1D -stim_label 9 iLp '...
            '-stim_file 10 ' dir_PPI '/inter.La.seed_' s '.' h '.bold.downsamp_allruns.1D -stim_label 10 iLa '...
            '-stim_file 11 ' dir_PPI '/' s '.' h '.bold.1D -stim_label 11 seed    '...
            '-bout -jobs 15 -allzero_OK -GOFORIT 5                                '...
            '-gltsym "SYM: +iDp -iDa"                                             '...
            '-glt_label 1 iDp-iDa                                                 '...
            '-gltsym "SYM: +iLp -iLa"                                             '...
            '-glt_label 2 iLp-iLa                                                 '...
            '-gltsym "SYM: iDp iLp -iDa -iLa"                                     '...
            '-glt_label 3 iP-iA                                                   '...
            '-gltsym "SYM: iDp iDa -iLp -iLa"                                     '...
            '-glt_label 4 iDTsk-iLTsk                                             '...
            '-gltsym "SYM: +0.333*iDp +0.333*iLp +0.333*iLa -1.0*iDa"             '...
            '-glt_label 5 iAnyD-None                                              '...
            '-gltsym "SYM: +0.333*iDp +0.333*iLp +0.333*iDa -1.0*iLa"             '...
            '-glt_label 6 iAnyL-None                                              '...
            '-gltsym "SYM: +0.25*iDp +0.25*iDa +0.25*iLp +0.25*iLa"               '...
            '-glt_label 7 iAllstim                                                '...
            '-gltsym "SYM: +0.5*iDp +0.5*iDa"                                     '...
            '-glt_label 8 iDTsk                                                   '...
            '-gltsym "SYM: +0.5*iLp +0.5*iLa"                                     '...
            '-glt_label 9 iLTsk                                                   '...
            '-fout -tout -x1D_stop                                                '...
            '-x1D ' dir_PPI '/X.PPI.' s '.' h '.xmat.1D                           '...
            '-xjpeg ' dir_PPI '/X.PPI.' s '.' h '.jpg                             '...
            '-x1D_uncensored ' dir_PPI '/X.PPI.' s '.' h '.nocensor.xmat.1D       '...
            '-fitts ' dir_PPI '/fitts.PPI.' subj '.' s '.' h '.niml.dset          '...
            '-errts ' dir_PPI '/errts.PPI.' subj '.' s '.' h '.niml.dset          '...
            '-bucket ' dir_PPI '/stats.PPI.' subj '.' s '.' h '.niml.dset']);

        % Execute the 3dREMLfit script, written by 3dDeconvolve --
        unix(['tcsh -x ../' subj '.REML_cmd -GOFORIT']);
    end
end

%% Turn of output logging
diary off;

end





