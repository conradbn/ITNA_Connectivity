%% NFA Structure Function Project
% Surface-based Beta-series preprocessing pipeline 
% Uses an afni_proc script, starting from raw data to make the code more
% concise and reproducible. Discard intermediate volumetric data since it
% takes up so much storage. Includes WM/Vent principle component
% regression, 6mm smoothing on surface, and estimation of beta using the
% LSS method from Mumford et al. 2012.

purge
dir_start = '/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/';
cd(dir_start);
fnames = dir('*_proc');

% For each subject
for s = 1:numel(fnames)
    % Load the subject variables saved in workspace .mat file
    cd(dir_start)
    cd(fnames(s).name);
    var_file = dir('workspace_variables_post*.mat');
    load(var_file.name,'subj','dir_results','dir_nii','dir_onset','dir_fs','dir_orig');
    
    % Correct folder paths to direct to server
    dir_results = strrep(dir_results,'/Users/nbl_imac/Documents/afni_tmp/','/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/');
    dir_nii = strrep(dir_nii,'/Users/nbl_imac/Documents/afni_tmp/','/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/');
    dir_onset = strrep(dir_onset,'/Users/nbl_imac/Documents/afni_tmp/','/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/');
    dir_fs = strrep(dir_fs,'/Users/nbl_imac/Documents/afni_tmp/','/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/');
    dir_orig = strrep(dir_orig,'/Users/nbl_imac/Documents/afni_tmp/','/Volumes/NBL_Projects/Price_NFA/NFA_fMRI/ProcessedData/');
    
    %% Set temporary foldre for beta series preprocessing
    dir_tmp = ['/Users/nbl_imac2/Desktop/sf_afni_tmp/' subj '.beta_series'];
   
    %% Create combined onset files
    cd([dir_results 'stimuli']);
    stims = dir(['onsets_*_*_' subj '.txt']);
    allstim = ['onsets_Allstims_' subj '.txt'];
    % Allstim file starts as copy of the first onsets file 
    unix(['cp ' stims(1).name ' ' allstim]);
    % Iteratively append each set of onset times to a single file using
    % afni's timing_tool.py program
    for ii = 2:numel(stims)
        unix(['timing_tool.py -timing ' allstim ' -extend ' stims(ii).name...
            ' -sort -write_timing ' allstim]);
    end
    
    %% Run afni_proc pipeline
    cd(dir_results);
    % Functional data
    func_nii = [dir_orig '*s_*_SENSE_.nii.gz'];
    % Slice timing file
    slice_timing_txt = ['/Volumes/NBL_Projects/Price_NFA/Software+Code'...
                        '/matfiles/preprocessing/nfa_slice_order_40slices_oddsevens_AFNI.txt'];
    
    % Set up afni_proc command
    afni_proc_command = ['afni_proc.py -subj_id ' subj '_BSC'...
                        ' -blocks despike tshift align volreg surf blur scale regress'...
                        ' -out_dir ' dir_tmp...
                        ' -dsets ' func_nii...
                        ' -copy_anat ' dir_fs 'SUMA/brain.nii '...
                        ' -anat_has_skull no'...
                        ' -surf_anat ' dir_fs 'SUMA/' subj '_SurfVol.nii '...
                        ' -surf_spec ' dir_fs 'SUMA/std.60.' subj '_?h.spec '...
                        ' -anat_follower_ROI FSvent epi ' dir_fs '/SUMA/fs_ap_latvent.nii.gz'...
                        ' -anat_follower_ROI FSWe epi ' dir_fs '/SUMA/fs_ap_wm.nii.gz'...
                        ' -anat_follower_erode FSvent FSWe'... 
                        ' -surf_anat_aligned yes'...
                        ' -tshift_opts_ts -verbose -tpattern @' slice_timing_txt...
                        ' -volreg_align_e2a'...
                        ' -align_opts_aea -cost lpc+ZZ'...
                        ' -volreg_align_to MIN_OUTLIER'...
                        ' -blur_size 6'...
                        ' -regress_stim_types IM'...
                        ' -regress_stim_times stimuli/' allstim...
                        ' -regress_stim_labels allstims'...
                        ' -regress_basis "GAM(8.6,.547,1)"'...
                        ' -regress_ROI_PC FSvent 3'...
                        ' -regress_ROI_PC FSWe 3'...
                        ' -regress_censor_motion 0.3'...  
                        ' -regress_censor_outliers 0.05'...
                        ' -regress_motion_per_run'...
                        ' -regress_apply_mot_types demean deriv'...
                        ' -regress_no_fitts'...
                        ' -regress_3dD_stop'...
                        ' -regress_compute_tsnr no'...
                        ' -regress_opts_3dD'...
                        '    -bout'...
                        '    -jobs 15'...
                        '    -allzero_OK'...
                        '    -GOFORIT 5'...
                        ' -html_review_style pythonic'];

    % Run afni_proc.py command, which sets up the full AFNI processing pipeline script
    unix(afni_proc_command);

    % Actually run processing script
    unix(['tcsh -xef proc.' subj '_BSC']);
    
    %% Run 3dLSS to estimate beta series
    cd(dir_tmp);
    hemi = {'lh' 'rh'};
    % For each hemisphere 
    for ii = 1:numel(hemi)
        h = hemi{ii};
        % Catenate final scaled data from each run 
        unix(['3dTcat '...
            ' pb06.' subj '_BSC.' h '.r*.scale.niml.dset'...
            ' -prefix rm.sm_scl_' h],'-echo');
        % 3dLSS - with censoring
        unix(['3dLSS -verb -input rm.sm_scl_' h '.niml.dset'...
            ' -matrix X.xmat.1D'...
            ' -save1D ' subj '_' h '_LSS_est_vecs.txt'...
            ' -prefix ' subj '_' h '_LSS_betas.niml.dset'],'-echo');
        unix('rm -f rm*');
    end
    
    %% Clean up the folder and copy to server
    % Remove volumetric from early preprocessing stages (already have these
    % data from univariate analysis preprocessing)
    unix('rm -f pb*.BRIK pb*.HEAD');
   
    % Copy folder to server
    unix(['cp -r ' dir_tmp ' ' dir_nii]);
    
    % Move the proc script to parent folder 
    unix(['mv ' dir_results 'proc.' subj '_BSC ' dir_nii]);
    
end